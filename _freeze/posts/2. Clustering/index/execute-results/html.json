{
  "hash": "a4a9d806e0368c9910c93f545d003339",
  "result": {
    "markdown": "---\ntitle: \"Post 2 - Clustering\"\nformat:\n  html:\n    self-contained: true\n    toc: true\n    theme: cosmo\nauthor: \"Charan Teja Chelle\"\ndate: \"2023-10-08\"\ncategories: [code, data visualization]\nimage: \"clustering.jpg\"\nimage-height: 640px\nimage-width: 426px\n---\n\n# Introduction\n\nClustering is more of an unsupervised machine learning where unlabeled similar examples are grouped into clusters in order to understand a data set in a system. The fundamental difference between clustering and classification is that if these examples are labeled, then clustering becomes classification. Grouping is done with the help of a metric called 'similarity measure', which can be obtained with the help of examples' feature data. So, the primary objective of clustering is to discover natural groupings or structures in the data that might not be explicitly defined. There are various types of clustering namely hierarchical, agglomerative, k-means. Few of clustering applications in machine learning include market segmentation, image segmentation, search result grouping, document clustering, anomaly detection and social network analysis.\n\n# Code\n\nIn this code sample, we are visualizing the results using synthetic data applying K-Means clustering algorithm (where Scikit-learn library is used for the machine learning part; Matplotlib and Seaborn for data visualization). The resultant plot includes original data points, cluster data points and cluster centers with effective clarity of data visualization.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plot\nimport seaborn as sns\nfrom sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\n\n# Create synthetic data with three clusters\nX, y = make_blobs(n_samples=300, centers=3, random_state=42, cluster_std=1.0)\n\n# Explicitly set n_init to suppress warning\nkmeans_cluster = KMeans(n_clusters=3, random_state=42, n_init=10)  # You can dynamically set n_init to another value\ny_kmeans_cluster = kmeans_cluster.fit_predict(X)\n\n# Data Visualization using Seaborn and Matplotlib\nplot.figure(figsize=(9, 7))\n\n# Plot the original data points\nplot.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', edgecolor='k', s=70, label='Original Data')\n\n# Plot the cluster centers\nplot.scatter(kmeans_cluster.cluster_centers_[:, 0], kmeans_cluster.cluster_centers_[:, 1], c='red', marker='X', s=200, label='Cluster Centers')\n\n# Plot the clustered data points\nplot.scatter(X[:, 0], X[:, 1], c=y_kmeans_cluster, cmap='viridis', edgecolor='k', s=50, label='Clustered Data')\n\n# Add labels and title\nplot.title('K-Means Clustering')\nplot.xlabel('Feature 1')\nplot.ylabel('Feature 2')\n\n# Add legend\nplot.legend()\n\n# Display the results\nplot.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=744 height=597}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}
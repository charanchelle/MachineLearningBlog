{
  "hash": "c04c51e062aea3c327b4cce3d8a597d9",
  "result": {
    "markdown": "---\ntitle: \"Post 1 - Probability Theory and Random Variables\"\nformat:\n  html:\n    self-contained: true\n    toc: true\n    theme: cosmo\nauthor: \"Charan Teja Chelle\"\ndate: \"2023-09-15\"\ncategories: [code, data visualization]\nimage: \"image.jpg\"\n---\n\n# Introduction:\n\nTwo fundamental ideas in the wide field of machine learning - Random Variables and Probability Theory, pave way for reliable algorithms and accurate prediction, mitigating uncertainty to maximum possible extent. In this blog post, we will delve deeper into the core principles of these concepts and take a loot at their significance and relevance in current industry.\n\n## Probability Theory\n\nProbability theory provides a consistent framework for the quantification and manipulation of uncertainty with discrete and continuous probability distributions. It also extends its arms into Bayesian inference and Conditional probability, which are the backbone of probabilistic modeling.\n\n## Random Variables\n\nRandom variables (discrete and continuous) assume the numerical value of all possible outcomes of an experiment, serving as a bridge between probability theory and data.\n\n# Code:\n\n## Code Sample - 1\n\nThis is a code sample that involves generating random variables and computing probabilities. A six-sided die is rolled 20 times (input) and probabilities of each outcome is calculated and displayed accordingly (output)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport random\n\n# Generating a Random Variable - Rolling a six-sided die\ndef roll_die():\n    return random.randint(1, 6)\n\n# Simulating an Experiment - Rolling a six-sided die 20 times\nnumber_of_rolls = 20\nall_rolls = [roll_die() for _ in range(number_of_rolls)]\n\n# Computing Probability Distribution\ndef compute_probability(dice_outcomes):\n    probabilities = {i: dice_outcomes.count(i) / len(dice_outcomes) for i in set(dice_outcomes)}\n    return probabilities\n\n# Displaying Results\nprint(f\"Simulated Rolls: {all_rolls}\")\nprint(\"\\nProbability Distribution:\")\nfor outcome, probability in compute_probability(all_rolls).items():\n    print(f\"Outcome {outcome}: Probability {probability:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimulated Rolls: [2, 4, 1, 6, 1, 5, 3, 3, 2, 6, 1, 4, 4, 1, 2, 4, 5, 1, 5, 1]\n\nProbability Distribution:\nOutcome 1: Probability 0.30\nOutcome 2: Probability 0.15\nOutcome 3: Probability 0.10\nOutcome 4: Probability 0.20\nOutcome 5: Probability 0.15\nOutcome 6: Probability 0.10\n```\n:::\n:::\n\n\n## Code Sample - 2\n\nThis relatively complex code sample deals with conditional probability where 'probability of playing cricket given the weather' is already declared; and weather conditions for 20 days are simulated, which serves as input; output will be finding cricket playing possibilities for 20 days, backed with the data visualization table stating 'weather conditions' on the X-axis and 'cricket playing possibilities' on Y-axis with scattered points plotting conditional probability.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Simulating Data - Weather and Cricket Playing\nnp.random.seed(45)\n\n# Input: Simulating weather conditions (0: Sunny, 1: Overcast, 2: Rainy) for 20 days\nweather_conditions = np.random.choice([0, 1, 2], size=20, p=[0.5, 0.2, 0.3])\n\n# Conditional Probability - Probability of playing cricket given the weather\nprob_play_cricket_given_sunny = 0.9\nprob_play_cricket_given_overcast = 0.95\nprob_play_cricket_given_rainy = 0.6\n\nplay_cricket = []\n\nfor weather in weather_conditions:\n    if weather == 0:\n        play_cricket.append(np.random.choice([1, 0], p=[prob_play_cricket_given_sunny, 1 - prob_play_cricket_given_sunny]))\n    elif weather == 1:\n        play_cricket.append(np.random.choice([1, 0], p=[prob_play_cricket_given_overcast, 1 - prob_play_cricket_given_overcast]))\n    else:\n        play_cricket.append(np.random.choice([1, 0], p=[prob_play_cricket_given_rainy, 1 - prob_play_cricket_given_rainy]))\n\n# Displaying Results\nprint(f\"Simulated Weather probabilities for 20 days: {weather_conditions}\")\nprint(f\"\\nResultant Cricket playing probabilities for 20 days: {play_cricket}\")\n\n# Data Visualization using Seaborn and Matplotlib\nplt.figure(figsize=(9, 7))\n\n# Plotting Conditional Probability with Swarm Plot\nsns.swarmplot(x=weather_conditions, y=play_cricket,hue=weather_conditions, palette=\"pastel\", size=8)\nplt.title('Conditional Probability: Cricket Playing Given Weather')\nplt.xlabel('Weather Conditions (0: Sunny, 1: Overcast, 2: Rainy)')\nplt.ylabel('Play Cricket (1: Yes, 0: No)')\n\n# Displaying Results\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimulated Weather probabilities for 20 days: [2 1 0 0 0 0 0 0 0 1 2 1 2 0 1 0 2 1 0 0]\n\nResultant Cricket playing probabilities for 20 days: [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-2.png){width=738 height=597}\n:::\n:::\n\n\n## \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}
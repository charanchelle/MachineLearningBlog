---
title: "Post 2 - Clustering"
format:
  html:
    self-contained: true
    toc: true
    theme: cosmo
author: "Charan Teja Chelle"
date: "2023-10-08"
categories: [code, data visualization]
image: "clustering.jpg"
image-height: 640px
image-width: 426px
---

# Introduction

Clustering is more of an unsupervised machine learning where unlabeled similar examples are grouped into clusters in order to understand a data set in a system. The fundamental difference between clustering and classification is that if these examples are labeled, then clustering becomes classification. Grouping is done with the help of a metric called 'similarity measure', which can be obtained with the help of examples' feature data. So, the primary objective of clustering is to discover natural groupings or structures in the data that might not be explicitly defined. There are various types of clustering namely hierarchical, agglomerative, k-means. Few of clustering applications in machine learning include market segmentation, image segmentation, search result grouping, document clustering, anomaly detection and social network analysis.

# Code

In this code sample, we are visualizing the results using synthetic data applying K-Means clustering algorithm (where Scikit-learn library is used for the machine learning part; Matplotlib and Seaborn for data visualization). The resultant plot includes original data points, cluster data points and cluster centers with effective clarity of data visualization.

```{python}
import numpy as np
import matplotlib.pyplot as plot
import seaborn as sns
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

# Create synthetic data with three clusters
X, y = make_blobs(n_samples=300, centers=3, random_state=42, cluster_std=1.0)

# Explicitly set n_init to suppress warning
kmeans_cluster = KMeans(n_clusters=3, random_state=42, n_init=10)  # You can dynamically set n_init to another value
y_kmeans_cluster = kmeans_cluster.fit_predict(X)

# Data Visualization using Seaborn and Matplotlib
plot.figure(figsize=(9, 7))

# Plot the original data points
plot.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', edgecolor='k', s=70, label='Original Data')

# Plot the cluster centers
plot.scatter(kmeans_cluster.cluster_centers_[:, 0], kmeans_cluster.cluster_centers_[:, 1], c='red', marker='X', s=200, label='Cluster Centers')

# Plot the clustered data points
plot.scatter(X[:, 0], X[:, 1], c=y_kmeans_cluster, cmap='viridis', edgecolor='k', s=50, label='Clustered Data')

# Add labels and title
plot.title('K-Means Clustering')
plot.xlabel('Feature 1')
plot.ylabel('Feature 2')

# Add legend
plot.legend()

# Display the results
plot.show()
```
